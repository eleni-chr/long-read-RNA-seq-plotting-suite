function countflags
%% Function written by Eleni Christoforidou in MATLAB R2019b

%This function displays which flags appear in a SAM file and how many times
%each flag appears. Multiple SAM files are checked at once.

%NOTE: The function "flag_analysis" must be run beforehand, to generate the
%appropriate variables to be used in the current function.

%Run this function from inside the folder containing the subfolders with
%the "flag_analysis.mat" files (generated by the "flag_analysis" function).

%INPUT ARGUMENTS: None.

%OUTPUT ARGUMENTS: None, but the following variables are appended
%to each "flag_analysis.mat" file:
%(1)countflags: An M x N matrix where M is equal to the number of unique
%               flags found in the SAM file and N is equal to the number
%               of occurrences of the corresponding flag.
%(2)allflags: An M x 4 cell array where M is equal to the number of unique
%             flags found in the SAM file. The first column lists the
%             bitewise value of each unique flag. The second column breaks
%             down the corresponding flag to its combination of
%             properties. The third column shows the number of occurrences
%             of the corresponding flag. The fourth column shows the text 
%             interpretation of the corresponding properties.
%%
%Find MAT files to work with.
D=dir('*/flag_analysis.mat'); %get list of MAT files in subfolders.
d=length(D); %number of MAT files found.
fprintf('%d MAT files found.\n',d) %inform user.
flaglist=[1 2 4 8 16 32 64 128 256 512 1024 2048]; %list of flags.
codes={'segment is mapped on the forward strand/',...
    'template has multiple segments in sequencing/',...
    'each segment properly aligned/',...
    'segment is unmapped/',...
    'next read in the template is unmapped/',...
    'read sequence is reverse complemented/',...
    'read sequence of the next segment in the template is reverse complemented/',...
    'first segment in the template/',...
    'last segment in the template/',...
    'secondary alignment/',...
    'did not pass filters/',...
    'PCR or optical duplicate/',...
    'supplementary alignment'}; %text equivalent for each numerical flag code in flaglists at the same position (except the first element which corresponds to flag=0).
wd=cd; %save working directory.

for f=1:d %loop through each MAT file.
    cd(D(f).folder); %navigate to folder containing MAT file.
    load('flag_analysis.mat','flags') %load the array of flags into the workspace.
    U=unique(flags); %get the same data as in "flags", but with no repetitions and in sorted order.
    N=numel(U); %total number of unique flags.
    count=zeros(N,1); %initialise variable.
    for k=1:N %loop through each unique flag.
        count(k)=sum(flags==U(k)); %calculate how many times the current flag k is present in the variable "flags".
    end
    countflags=[U(:) count]; %create a matrix, where the first column is a list
    %of unique flags appearing in the original array of flags, and the second
    %column represents how many times that flag appears in the original array
    %of flags.
    
    %Decode flags.
    s=length(countflags); %get number of unique flags.
    allflags=cell(s,4); %initialise empty variable.
    
    for kk=1:length(allflags)
        allflags{kk,3}=countflags(kk,2);
    end
    
    for g=1:s %loop through each flag.
        flagvalue=countflags(g,1); %get value of current flag.
        allflags{g,1}=flagvalue;
        if ismember(flagvalue,flaglist)
            allflags{g,2}=flagvalue;
            continue; %pass control to next iteration of for-loop.
        elseif flagvalue==0
            allflags{g,2}=flagvalue;
            continue;
        else
            possibleflags=flaglist(flaglist<flagvalue);
            allflags{g,2}=[allflags{g,2},max(possibleflags)]; %append to list of allflags.
            a=flagvalue-max(possibleflags);
            while a>0
                if ismember(a,flaglist)
                    allflags{g,2}=[allflags{g,2},a];
                    a=a-max(possibleflags);
                else
                    possibleflags=flaglist(flaglist<a);
                    a=a-max(possibleflags);
                    if a==0
                        allflags{g,2}=[allflags{g,2},a];
                        break; %exit while-loop.
                    end
                end
            end
        end
    end
    
    for jj=1:length(allflags)
        vect=allflags{jj,2};
        new=sort(vect); %sort elements in column 2 of cell array in ascending order.
        allflags{jj,2}=new; %replace elements in "allflags" with sorted elements.
    end
    
    %Interpret flag codes
    v=length(allflags);
    for w=1:v
        vector=allflags{w,2};
        indices=ismember([0,flaglist],vector); %get indices of flags that appear in the variable "vector".
        text=codes(indices==1); %get text equivalent of numerical code.
        allflags{w,4}=text; %append code interpretation to "allflags".
    end
        
    save('flag_analysis.mat','countflags','allflags','-append'); %save results.    
    cd(wd); %return to working directory for next iteration of for-loop.
end
clear
end