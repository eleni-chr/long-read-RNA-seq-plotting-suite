function countmapqs
%% Function written by Eleni Christoforidou in MATLAB R2019b

%This function checks the mapping quality (MAPQ) of unmapped reads in a SAM
%file. Multiple SAM files are checked at once.

%NOTE: The functions "flag_analysis" and "mapq_analysis" must be run 
%beforehand (in any order), to generate the appropriate variables to be 
%used in the current function.

%Run this function from inside the folder containing the subfolders with
%the MAT files generated by the above functions.

%FUNCTION INPUT ARGUMENTS: None.

%FUNCTION OUTPUT ARGUMENTS:
%No output arguments, but the following variables are appended to each
%"mapq_analysis.mat" file:
%(1)mapq_unmapped:       An M x 2 matrix where M is equal to the number 
%                        of unique mapping quality scores found in the 
%                        SAM file and N is equal to the number of 
%                        occurrences of the corresponding score, when
%                        considering only unmapped sequences.
%(2)mapq_mapped:         An M x 2 matrix where M is equal to the number 
%                        of unique mapping quality scores found in the 
%                        SAM file and N is equal to the number of 
%                        occurrences of the corresponding score, when
%                        considering only mapped sequences.

%NOTES:
%Mapping qualities are integers ranging from 0 to 60. A mapping quality 
%score equal to 255 indicates that the actual mapping quality score is not 
%available in the SAM file. For UNMAPPED sequences, the MAPQ will be 0 by
%default, however, this is not the actual quality score and no assumption
%can be made about whether it may truly be a score of 0 or not.

%%
%Find folders with MAT files to work with.
files=dir(cd); %get a list of all files and folders in current directory.
dirFlags=[files.isdir]; % get a logical vector that tells which is a directory.
subFolders=files(dirFlags); %extract only those that are directories.
wd=cd; %save working directory.

for f=3:length(subFolders) %loop through each subfolder.
    cd(subFolders(f).name); %navigate to folder containing MAT files.
    load('flag_analysis.mat','flags'); %load the array of flags into the workspace.
    load('mapq_analysis.mat','mapqs'); %load the array of mapping quality scores into the workspace.
    
    %For unmapped reads.
    unmapped_scores=mapqs(flags==4); %generate variable containing mapping quality socres ONLY for the unmapped reads.
    U=unique(unmapped_scores); %get the same data as in "unmapped_scores", but with no repetitions and in sorted order.
    N=numel(U); %total number of unique quality scores.
    count=zeros(N,1); %initialise variable.
    for k=1:N %loop through each unique MAPQ score.
        count(k)=sum(unmapped_scores==U(k)); %calculate how many times the current MAPQ score k is present in the variable "unmapped_scores".
    end
    mapq_unmapped=[U(:) count]; %create a matrix, where the first column is a list
    %of unique MAPQ scores appearing in the original array of unmapped_scores, and the second
    %column represents how many times that MAPQ score appears in the original array
    %of unmapped_scores.
    
    %For mapped reads.
    mapped_scores=mapqs(flags~=4); %generate variable containing mapping quality scores ONLY for the mapped reads.
    u=unique(mapped_scores);
    n=numel(u);
    count2=zeros(n,1);
    for kk=1:n
        count2(kk)=sum(mapped_scores==u(kk));
    end
    mapq_mapped=[u(:) count2];
    
    save('mapq_analysis.mat','mapq_unmapped','mapq_mapped','-append'); %save results.
    cd(wd); %return to working directory for next iteration of for-loop.
end
clear
end