function fastq_headers
%% Function written by Eleni Christoforidou in MATLAB R2019b.

%This function checks if there are entries with identical Headers in a FASTQ
%file. Headers in FASTQ files should (theoretically) be unique.

%NOTE: The custom function "fastq_analysis" must be ran beforehand, in order to
%generate the appropriate variables to be used in the current function.

%Run this function from inside the folder containing the subfolders with
%the "fastq_analysis.mat" files (generated by the "fastq_analysis" function).

%INPUT ARGUMENTS: None.

%OUTPUT ARGUMENTS: None, but the following variable is appended to the 
%"fastq_analysis.mat" file:
%dup_fastq_headers:    A 1 x N cell array, where N is the number of 
%                      non-unique Headers in the FASTQ file. Each 
%                      element in the array represents the value of a 
%                      non-unique Header.
%%
%Find MAT files to work with.
D=dir('*/fastq_analysis.mat'); %get list of MAT files in subfolders.
d=length(D); %number of MAT files found.
fprintf('%d MAT files found.\n',d) %inform user.
wd=cd; %save working directory.

for f=1:d %loop through each MAT file.
    cd(D(f).folder); %navigate to folder containing MAT file.
    load('fastq_analysis.mat','fastq_headers'); %load the data into the workspace.
    fprintf('Working on file %d of %d\n',f,d) %inform user of progress.
    
    %Get Headers that appear AT LEAST twice in the FASTQ file.
    [~,idx]=unique(fastq_headers,'stable'); %get indices of first occurrence of each unique Header.
    idx_all=1:length(fastq_headers);
    idx_dup=setdiff(idx_all',idx,'stable'); %get the indices of the non-unique Headers in fastq_headers.
    dup_fastq_headers=cell(1,length(idx_dup)); %initialise variable.
    for ii=1:length(idx_dup)
        dup_fastq_headers(ii)=fastq_headers(idx_dup(ii)); %dup_fastq_headers contains the all the non-unique Headers in the FASTQ file.
    end

    save('fastq_analysis.mat','dup_fastq_headers','-append'); %append the variable to the MAT file.
    cd(wd); %return to working directory for next iteration of for-loop.
end
clear
end